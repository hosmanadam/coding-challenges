"""https://projecteuler.net/problem=12

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""

from math import inf, sqrt
from functools import reduce

def generate_triangle_numbers(max_value=inf, max_yield=inf):
  """Yields next triangle number when saved to variable and called via next()
  - StopIteration when candidate's value exceeds optional max_value parameter
  - StopIteration when optional max_yield number of yields have been made"""
  current_no = 0
  next_increment = 1
  next_no = 1
  while next_no <= max_value and next_increment <= max_yield:
    yield next_no
    current_no = next_no
    next_increment += 1
    next_no = current_no+next_increment

def get_prime_factors(num):
  """Works down on factor tree recursively and returns a list of prime factors."""
  for i in range(2, int(sqrt(num))+1):
    if num%i == 0:
      return [i] + get_prime_factors(int(num/i))
  return [num]

def get_len_divisors(num):
  """Returns number of divisors for num, using get_prime_factors().
  Divisors include 1 and num."""
  pfs = get_prime_factors(num)
  return reduce(lambda x,y: x*y, [(pfs.count(pf)+1) for pf in set(pfs)])

triangle_number = generate_triangle_numbers()

while True:
  candidate = next(triangle_number)
  if get_len_divisors(candidate) > 500:
    print(candidate)
    break
